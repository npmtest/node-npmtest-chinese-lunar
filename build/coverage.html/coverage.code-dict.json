{"/home/travis/build/npmtest/node-npmtest-chinese-lunar/test.js":"/* istanbul instrument in package npmtest_chinese_lunar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chinese-lunar/lib.npmtest_chinese_lunar.js":"/* istanbul instrument in package npmtest_chinese_lunar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chinese_lunar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chinese_lunar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chinese-lunar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chinese-lunar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chinese_lunar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chinese_lunar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chinese_lunar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chinese_lunar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chinese_lunar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chinese_lunar.__dirname + '/lib.npmtest_chinese_lunar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chinese-lunar/node_modules/chinese-lunar/lib/chinese-lunar.js":"/**\n * 农历与阳历的转换，目前只能支持1900至2100的转换\n * User: conis<conis.yi@gmail.com>\n * Github: https://github.com/conis/chinese-lunar\n * Date: 1/29/13\n * Time: 9:58 上午\n *\n */\n(function() {\n\t/*\n\t 农历每一年，对应公历的数据\n\t 此数据来源于互联网，原作者不详细，在此感谢\n\t MAPPING[0][0]：每年闰月的月份，0表示不闰\n\t MAPPING[0][1, 13]：表示每月初一对应的阳历时间，前两个字符表示月，后两个字符表示月\n\t */\n\tvar MAPPING = [\n\t\t[8, \"0131\", \"0301\", \"0331\", \"0429\", \"0528\", \"0627\", \"0726\", \"0825\", \"0924\", \"1023\", \"1122\", \"1222\", \"1320\"], \t//1900\n\t\t[0, \"0219\", \"0320\", \"0419\", \"0518\", \"0616\", \"0716\", \"0814\", \"0913\", \"1012\", \"1111\", \"1211\", \"1310\"], \t//1901\n\t\t[0, \"0208\", \"0310\", \"0408\", \"0508\", \"0606\", \"0705\", \"0804\", \"0902\", \"1002\", \"1031\", \"1130\", \"1230\"], \t//1902\n\t\t[5, \"0129\", \"0227\", \"0329\", \"0427\", \"0527\", \"0625\", \"0724\", \"0823\", \"0921\", \"1020\", \"1119\", \"1219\", \"1317\"], \t//1903\n\t\t[0, \"0216\", \"0317\", \"0416\", \"0515\", \"0614\", \"0713\", \"0811\", \"0910\", \"1009\", \"1107\", \"1207\", \"1306\"], \t//1904\n\t\t[0, \"0204\", \"0306\", \"0405\", \"0504\", \"0603\", \"0703\", \"0801\", \"0830\", \"0929\", \"1028\", \"1127\", \"1226\"], \t//1905\n\t\t[4, \"0125\", \"0223\", \"0325\", \"0424\", \"0523\", \"0622\", \"0721\", \"0820\", \"0918\", \"1018\", \"1116\", \"1216\", \"1314\"], \t//1906\n\t\t[0, \"0213\", \"0314\", \"0413\", \"0512\", \"0611\", \"0710\", \"0809\", \"0908\", \"1007\", \"1106\", \"1205\", \"1304\"], \t//1907\n\t\t[0, \"0202\", \"0303\", \"0401\", \"0430\", \"0530\", \"0629\", \"0728\", \"0827\", \"0925\", \"1025\", \"1124\", \"1223\"], \t//1908\n\t\t[2, \"0122\", \"0220\", \"0322\", \"0420\", \"0519\", \"0618\", \"0717\", \"0816\", \"0914\", \"1014\", \"1113\", \"1213\", \"1311\"], \t//1909\n\t\t[0, \"0210\", \"0311\", \"0410\", \"0509\", \"0607\", \"0707\", \"0805\", \"0904\", \"1003\", \"1102\", \"1202\", \"1301\"], \t//1910\n\t\t[6, \"0130\", \"0301\", \"0330\", \"0429\", \"0528\", \"0626\", \"0726\", \"0824\", \"0922\", \"1022\", \"1121\", \"1220\", \"1319\"], \t//1911\n\t\t[0, \"0218\", \"0319\", \"0417\", \"0517\", \"0615\", \"0714\", \"0813\", \"0911\", \"1010\", \"1109\", \"1209\", \"1307\"], \t//1912\n\t\t[0, \"0206\", \"0308\", \"0407\", \"0506\", \"0605\", \"0704\", \"0802\", \"0901\", \"0930\", \"1029\", \"1128\", \"1227\"], \t//1913\n\t\t[5, \"0126\", \"0225\", \"0327\", \"0425\", \"0525\", \"0623\", \"0723\", \"0821\", \"0920\", \"1019\", \"1117\", \"1217\", \"1315\"], \t//1914\n\t\t[0, \"0214\", \"0316\", \"0414\", \"0514\", \"0613\", \"0712\", \"0811\", \"0909\", \"1009\", \"1107\", \"1207\", \"1305\"], \t//1915\n\t\t[0, \"0203\", \"0304\", \"0403\", \"0502\", \"0601\", \"0630\", \"0730\", \"0829\", \"0927\", \"1027\", \"1125\", \"1225\"], \t//1916\n\t\t[2, \"0123\", \"0222\", \"0323\", \"0421\", \"0521\", \"0619\", \"0719\", \"0818\", \"0916\", \"1016\", \"1115\", \"1214\", \"1313\"], \t//1917\n\t\t[0, \"0211\", \"0313\", \"0411\", \"0510\", \"0609\", \"0708\", \"0807\", \"0905\", \"1005\", \"1104\", \"1203\", \"1302\"], \t//1918\n\t\t[7, \"0201\", \"0302\", \"0401\", \"0430\", \"0529\", \"0628\", \"0727\", \"0825\", \"0924\", \"1024\", \"1122\", \"1222\", \"1321\"], \t//1919\n\t\t[0, \"0220\", \"0320\", \"0419\", \"0518\", \"0616\", \"0716\", \"0814\", \"0912\", \"1012\", \"1110\", \"1210\", \"1309\"], \t//1920\n\t\t[0, \"0208\", \"0310\", \"0408\", \"0508\", \"0606\", \"0705\", \"0804\", \"0902\", \"1001\", \"1031\", \"1129\", \"1229\"], \t//1921\n\t\t[5, \"0128\", \"0227\", \"0328\", \"0427\", \"0527\", \"0625\", \"0724\", \"0823\", \"0921\", \"1020\", \"1119\", \"1218\", \"1317\"], \t//1922\n\t\t[0, \"0216\", \"0317\", \"0416\", \"0516\", \"0614\", \"0714\", \"0812\", \"0911\", \"1010\", \"1108\", \"1208\", \"1306\"], \t//1923\n\t\t[0, \"0205\", \"0305\", \"0404\", \"0504\", \"0602\", \"0702\", \"0801\", \"0830\", \"0929\", \"1028\", \"1127\", \"1226\"], \t//1924\n\t\t[4, \"0124\", \"0223\", \"0324\", \"0423\", \"0522\", \"0621\", \"0721\", \"0819\", \"0918\", \"1018\", \"1116\", \"1216\", \"1314\"], \t//1925\n\t\t[0, \"0213\", \"0314\", \"0412\", \"0512\", \"0610\", \"0710\", \"0808\", \"0907\", \"1007\", \"1105\", \"1205\", \"1304\"], \t//1926\n\t\t[0, \"0202\", \"0304\", \"0402\", \"0501\", \"0531\", \"0629\", \"0729\", \"0827\", \"0926\", \"1025\", \"1124\", \"1224\"], \t//1927\n\t\t[2, \"0123\", \"0221\", \"0322\", \"0420\", \"0519\", \"0618\", \"0717\", \"0815\", \"0914\", \"1013\", \"1112\", \"1212\", \"1311\"], \t//1928\n\t\t[0, \"0210\", \"0311\", \"0410\", \"0509\", \"0607\", \"0707\", \"0805\", \"0903\", \"1003\", \"1101\", \"1201\", \"1231\"], \t//1929\n\t\t[6, \"0130\", \"0228\", \"0330\", \"0429\", \"0528\", \"0626\", \"0726\", \"0824\", \"0922\", \"1022\", \"1120\", \"1220\", \"1319\"], \t//1930\n\t\t[0, \"0217\", \"0319\", \"0418\", \"0517\", \"0616\", \"0715\", \"0814\", \"0912\", \"1011\", \"1110\", \"1209\", \"1308\"], \t//1931\n\t\t[0, \"0206\", \"0307\", \"0406\", \"0506\", \"0604\", \"0704\", \"0802\", \"0901\", \"0930\", \"1029\", \"1128\", \"1227\"], \t//1932\n\t\t[5, \"0126\", \"0224\", \"0326\", \"0425\", \"0524\", \"0623\", \"0722\", \"0821\", \"0920\", \"1019\", \"1118\", \"1217\", \"1315\"], \t//1933\n\t\t[0, \"0214\", \"0315\", \"0414\", \"0513\", \"0612\", \"0712\", \"0810\", \"0909\", \"1008\", \"1107\", \"1207\", \"1305\"], \t//1934\n\t\t[0, \"0204\", \"0305\", \"0403\", \"0503\", \"0601\", \"0701\", \"0730\", \"0829\", \"0928\", \"1027\", \"1126\", \"1226\"], \t//1935\n\t\t[3, \"0124\", \"0223\", \"0323\", \"0421\", \"0521\", \"0619\", \"0718\", \"0817\", \"0916\", \"1015\", \"1114\", \"1214\", \"1313\"], \t//1936\n\t\t[0, \"0211\", \"0313\", \"0411\", \"0510\", \"0609\", \"0708\", \"0806\", \"0905\", \"1004\", \"1103\", \"1203\", \"1302\"], \t//1937\n\t\t[7, \"0131\", \"0302\", \"0401\", \"0430\", \"0529\", \"0628\", \"0727\", \"0825\", \"0924\", \"1023\", \"1122\", \"1222\", \"1320\"], \t//1938\n\t\t[0, \"0219\", \"0321\", \"0420\", \"0519\", \"0617\", \"0717\", \"0815\", \"0913\", \"1013\", \"1111\", \"1211\", \"1309\"], \t//1939\n\t\t[0, \"0208\", \"0309\", \"0408\", \"0507\", \"0606\", \"0705\", \"0804\", \"0902\", \"1001\", \"1031\", \"1129\", \"1229\"], \t//1940\n\t\t[6, \"0127\", \"0226\", \"0328\", \"0426\", \"0526\", \"0625\", \"0724\", \"0823\", \"0921\", \"1020\", \"1119\", \"1218\", \"1317\"], \t//1941\n\t\t[0, \"0215\", \"0317\", \"0415\", \"0515\", \"0614\", \"0713\", \"0812\", \"0910\", \"1010\", \"1108\", \"1208\", \"1306\"], \t//1942\n\t\t[0, \"0205\", \"0306\", \"0405\", \"0504\", \"0603\", \"0702\", \"0801\", \"0831\", \"0929\", \"1029\", \"1127\", \"1227\"], \t//1943\n\t\t[4, \"0125\", \"0224\", \"0324\", \"0423\", \"0522\", \"0621\", \"0720\", \"0819\", \"0917\", \"1017\", \"1116\", \"1215\", \"1314\"], \t//1944\n\t\t[0, \"0213\", \"0314\", \"0412\", \"0512\", \"0610\", \"0709\", \"0808\", \"0906\", \"1006\", \"1105\", \"1205\", \"1303\"], \t//1945\n\t\t[0, \"0202\", \"0304\", \"0402\", \"0501\", \"0531\", \"0629\", \"0728\", \"0827\", \"0925\", \"1025\", \"1124\", \"1223\"], \t//1946\n\t\t[2, \"0122\", \"0221\", \"0323\", \"0421\", \"0520\", \"0619\", \"0718\", \"0816\", \"0915\", \"1014\", \"1113\", \"1212\", \"1311\"], \t//1947\n\t\t[0, \"0210\", \"0311\", \"0409\", \"0509\", \"0607\", \"0707\", \"0805\", \"0903\", \"1003\", \"1101\", \"1201\", \"1230\"], \t//1948\n\t\t[7, \"0129\", \"0228\", \"0329\", \"0428\", \"0528\", \"0626\", \"0726\", \"0824\", \"0922\", \"1022\", \"1120\", \"1220\", \"1318\"], \t//1949\n\t\t[0, \"0217\", \"0318\", \"0417\", \"0517\", \"0615\", \"0715\", \"0814\", \"0912\", \"1011\", \"1110\", \"1209\", \"1308\"], \t//1950\n\t\t[0, \"0206\", \"0308\", \"0406\", \"0506\", \"0605\", \"0704\", \"0803\", \"0901\", \"1001\", \"1030\", \"1129\", \"1228\"], \t//1951\n\t\t[5, \"0127\", \"0225\", \"0326\", \"0424\", \"0524\", \"0622\", \"0722\", \"0820\", \"0919\", \"1019\", \"1117\", \"1217\", \"1315\"], \t//1952\n\t\t[0, \"0214\", \"0315\", \"0414\", \"0513\", \"0611\", \"0711\", \"0810\", \"0908\", \"1008\", \"1107\", \"1206\", \"1305\"], \t//1953\n\t\t[0, \"0203\", \"0305\", \"0403\", \"0503\", \"0601\", \"0630\", \"0730\", \"0828\", \"0927\", \"1027\", \"1126\", \"1225\"], \t//1954\n\t\t[3, \"0124\", \"0222\", \"0324\", \"0422\", \"0522\", \"0620\", \"0719\", \"0818\", \"0916\", \"1016\", \"1114\", \"1214\", \"1313\"], \t//1955\n\t\t[0, \"0212\", \"0312\", \"0411\", \"0510\", \"0609\", \"0708\", \"0806\", \"0905\", \"1004\", \"1103\", \"1203\", \"1301\"], \t//1956\n\t\t[8, \"0131\", \"0302\", \"0331\", \"0430\", \"0529\", \"0628\", \"0727\", \"0825\", \"0924\", \"1023\", \"1122\", \"1221\", \"1320\"], \t//1957\n\t\t[0, \"0218\", \"0320\", \"0419\", \"0519\", \"0617\", \"0717\", \"0815\", \"0913\", \"1013\", \"1111\", \"1211\", \"1309\"], \t//1958\n\t\t[0, \"0208\", \"0309\", \"0408\", \"0508\", \"0606\", \"0706\", \"0804\", \"0903\", \"1002\", \"1101\", \"1130\", \"1230\"], \t//1959\n\t\t[6, \"0128\", \"0227\", \"0327\", \"0426\", \"0525\", \"0624\", \"0724\", \"0822\", \"0921\", \"1020\", \"1119\", \"1218\", \"1317\"], \t//1960\n\t\t[0, \"0215\", \"0317\", \"0415\", \"0515\", \"0613\", \"0713\", \"0811\", \"0910\", \"1010\", \"1108\", \"1208\", \"1306\"], \t//1961\n\t\t[0, \"0205\", \"0306\", \"0405\", \"0504\", \"0602\", \"0702\", \"0731\", \"0830\", \"0929\", \"1028\", \"1127\", \"1227\"], \t//1962\n\t\t[4, \"0125\", \"0224\", \"0325\", \"0424\", \"0523\", \"0621\", \"0721\", \"0819\", \"0918\", \"1017\", \"1116\", \"1216\", \"1315\"], \t//1963\n\t\t[0, \"0213\", \"0314\", \"0412\", \"0512\", \"0610\", \"0709\", \"0808\", \"0906\", \"1006\", \"1104\", \"1204\", \"1303\"], \t//1964\n\t\t[0, \"0202\", \"0303\", \"0402\", \"0501\", \"0531\", \"0629\", \"0728\", \"0827\", \"0925\", \"1024\", \"1123\", \"1223\"], \t//1965\n\t\t[3, \"0121\", \"0220\", \"0322\", \"0421\", \"0520\", \"0619\", \"0718\", \"0816\", \"0915\", \"1014\", \"1112\", \"1212\", \"1311\"], \t//1966\n\t\t[0, \"0209\", \"0311\", \"0410\", \"0509\", \"0608\", \"0708\", \"0806\", \"0904\", \"1004\", \"1102\", \"1202\", \"1231\"], \t//1967\n\t\t[7, \"0130\", \"0228\", \"0329\", \"0427\", \"0527\", \"0626\", \"0725\", \"0824\", \"0922\", \"1022\", \"1120\", \"1220\", \"1318\"], \t//1968\n\t\t[0, \"0217\", \"0318\", \"0417\", \"0516\", \"0615\", \"0714\", \"0813\", \"0912\", \"1011\", \"1110\", \"1209\", \"1308\"], \t//1969\n\t\t[0, \"0206\", \"0308\", \"0406\", \"0505\", \"0604\", \"0703\", \"0802\", \"0901\", \"0930\", \"1030\", \"1129\", \"1228\"], \t//1970\n\t\t[5, \"0127\", \"0225\", \"0327\", \"0425\", \"0524\", \"0623\", \"0722\", \"0821\", \"0919\", \"1019\", \"1118\", \"1218\", \"1316\"], \t//1971\n\t\t[0, \"0215\", \"0315\", \"0414\", \"0513\", \"0611\", \"0711\", \"0809\", \"0908\", \"1007\", \"1106\", \"1206\", \"1304\"], \t//1972\n\t\t[0, \"0203\", \"0305\", \"0403\", \"0503\", \"0601\", \"0630\", \"0730\", \"0828\", \"0926\", \"1026\", \"1125\", \"1224\"], \t//1973\n\t\t[4, \"0123\", \"0222\", \"0324\", \"0422\", \"0522\", \"0620\", \"0719\", \"0818\", \"0916\", \"1015\", \"1114\", \"1214\", \"1312\"], \t//1974\n\t\t[0, \"0211\", \"0313\", \"0412\", \"0511\", \"0610\", \"0709\", \"0807\", \"0906\", \"1005\", \"1103\", \"1203\", \"1301\"], \t//1975\n\t\t[8, \"0131\", \"0301\", \"0331\", \"0429\", \"0529\", \"0627\", \"0727\", \"0825\", \"0924\", \"1023\", \"1121\", \"1221\", \"1319\"], \t//1976\n\t\t[0, \"0218\", \"0320\", \"0418\", \"0518\", \"0617\", \"0716\", \"0815\", \"0913\", \"1013\", \"1111\", \"1211\", \"1309\"], \t//1977\n\t\t[0, \"0207\", \"0309\", \"0407\", \"0507\", \"0606\", \"0705\", \"0804\", \"0902\", \"1002\", \"1101\", \"1130\", \"1230\"], \t//1978\n\t\t[6, \"0128\", \"0227\", \"0328\", \"0426\", \"0526\", \"0624\", \"0724\", \"0823\", \"0921\", \"1021\", \"1120\", \"1219\", \"1318\"], \t//1979\n\t\t[0, \"0216\", \"0317\", \"0415\", \"0514\", \"0613\", \"0712\", \"0811\", \"0909\", \"1009\", \"1108\", \"1207\", \"1306\"], \t//1980\n\t\t[0, \"0205\", \"0306\", \"0405\", \"0504\", \"0602\", \"0702\", \"0731\", \"0829\", \"0928\", \"1028\", \"1126\", \"1226\"], \t//1981\n\t\t[4, \"0125\", \"0224\", \"0325\", \"0424\", \"0523\", \"0621\", \"0721\", \"0819\", \"0917\", \"1017\", \"1115\", \"1215\", \"1314\"], \t//1982\n\t\t[0, \"0213\", \"0315\", \"0413\", \"0513\", \"0611\", \"0710\", \"0809\", \"0907\", \"1006\", \"1105\", \"1204\", \"1303\"], \t//1983\n\t\t[10, \"0202\", \"0303\", \"0401\", \"0501\", \"0531\", \"0629\", \"0728\", \"0827\", \"0925\", \"1024\", \"1123\", \"1222\", \"1321\"], \t//1984\n\t\t[0, \"0220\", \"0321\", \"0420\", \"0520\", \"0618\", \"0718\", \"0816\", \"0915\", \"1014\", \"1112\", \"1212\", \"1310\"], \t//1985\n\t\t[0, \"0209\", \"0310\", \"0409\", \"0509\", \"0607\", \"0707\", \"0806\", \"0904\", \"1004\", \"1102\", \"1202\", \"1231\"], \t//1986\n\t\t[6, \"0129\", \"0228\", \"0329\", \"0428\", \"0527\", \"0626\", \"0726\", \"0824\", \"0923\", \"1023\", \"1121\", \"1221\", \"1319\"], \t//1987\n\t\t[0, \"0217\", \"0318\", \"0416\", \"0516\", \"0614\", \"0714\", \"0812\", \"0911\", \"1011\", \"1109\", \"1209\", \"1308\"], \t//1988\n\t\t[0, \"0206\", \"0308\", \"0406\", \"0505\", \"0604\", \"0703\", \"0802\", \"0831\", \"0930\", \"1029\", \"1128\", \"1228\"], \t//1989\n\t\t[5, \"0127\", \"0225\", \"0327\", \"0425\", \"0524\", \"0623\", \"0722\", \"0820\", \"0919\", \"1018\", \"1117\", \"1217\", \"1316\"], \t//1990\n\t\t[0, \"0215\", \"0316\", \"0415\", \"0514\", \"0612\", \"0712\", \"0810\", \"0908\", \"1008\", \"1106\", \"1206\", \"1305\"], \t//1991\n\t\t[0, \"0204\", \"0304\", \"0403\", \"0503\", \"0601\", \"0630\", \"0730\", \"0828\", \"0926\", \"1026\", \"1124\", \"1224\"], \t//1992\n\t\t[3, \"0123\", \"0221\", \"0323\", \"0422\", \"0521\", \"0620\", \"0719\", \"0818\", \"0916\", \"1015\", \"1114\", \"1213\", \"1312\"], \t//1993\n\t\t[0, \"0210\", \"0312\", \"0411\", \"0511\", \"0609\", \"0709\", \"0807\", \"0906\", \"1005\", \"1103\", \"1203\", \"1301\"], \t//1994\n\t\t[8, \"0131\", \"0301\", \"0331\", \"0430\", \"0529\", \"0628\", \"0727\", \"0826\", \"0925\", \"1024\", \"1122\", \"1222\", \"1320\"], \t//1995\n\t\t[0, \"0219\", \"0319\", \"0418\", \"0517\", \"0616\", \"0715\", \"0814\", \"0912\", \"1012\", \"1111\", \"1211\", \"1309\"], \t//1996\n\t\t[0, \"0207\", \"0309\", \"0407\", \"0507\", \"0605\", \"0705\", \"0803\", \"0902\", \"1002\", \"1031\", \"1130\", \"1230\"], \t//1997\n\t\t[5, \"0128\", \"0227\", \"0328\", \"0426\", \"0526\", \"0624\", \"0723\", \"0822\", \"0921\", \"1020\", \"1119\", \"1219\", \"1317\"], \t//1998\n\t\t[0, \"0216\", \"0318\", \"0416\", \"0515\", \"0614\", \"0713\", \"0811\", \"0910\", \"1009\", \"1108\", \"1208\", \"1307\"], \t//1999\n\t\t[0, \"0205\", \"0306\", \"0405\", \"0504\", \"0602\", \"0702\", \"0731\", \"0829\", \"0928\", \"1027\", \"1126\", \"1226\"], \t//2000\n\t\t[4, \"0124\", \"0223\", \"0325\", \"0423\", \"0523\", \"0621\", \"0721\", \"0819\", \"0917\", \"1017\", \"1115\", \"1215\", \"1313\"], \t//2001\n\t\t[0, \"0212\", \"0314\", \"0413\", \"0512\", \"0611\", \"0710\", \"0809\", \"0907\", \"1006\", \"1105\", \"1204\", \"1303\"], \t//2002\n\t\t[0, \"0201\", \"0303\", \"0402\", \"0501\", \"0531\", \"0630\", \"0729\", \"0828\", \"0926\", \"1025\", \"1124\", \"1223\"], \t//2003\n\t\t[2, \"0122\", \"0220\", \"0321\", \"0419\", \"0519\", \"0618\", \"0717\", \"0816\", \"0914\", \"1014\", \"1112\", \"1212\", \"1310\"], \t//2004\n\t\t[0, \"0209\", \"0310\", \"0409\", \"0508\", \"0607\", \"0706\", \"0805\", \"0904\", \"1003\", \"1102\", \"1201\", \"1231\"], \t//2005\n\t\t[7, \"0129\", \"0228\", \"0329\", \"0428\", \"0527\", \"0626\", \"0725\", \"0824\", \"0922\", \"1022\", \"1121\", \"1220\", \"1319\"], \t//2006\n\t\t[0, \"0218\", \"0319\", \"0417\", \"0517\", \"0615\", \"0714\", \"0813\", \"0911\", \"1011\", \"1110\", \"1210\", \"1308\"], \t//2007\n\t\t[0, \"0207\", \"0308\", \"0406\", \"0505\", \"0604\", \"0703\", \"0801\", \"0831\", \"0929\", \"1029\", \"1128\", \"1227\"], \t//2008\n\t\t[5, \"0126\", \"0225\", \"0327\", \"0425\", \"0524\", \"0623\", \"0722\", \"0820\", \"0919\", \"1018\", \"1117\", \"1216\", \"1315\"], \t//2009\n\t\t[0, \"0214\", \"0316\", \"0414\", \"0514\", \"0612\", \"0712\", \"0810\", \"0908\", \"1008\", \"1106\", \"1206\", \"1304\"], \t//2010\n\t\t[0, \"0203\", \"0305\", \"0403\", \"0503\", \"0602\", \"0701\", \"0731\", \"0829\", \"0927\", \"1027\", \"1125\", \"1225\"], \t//2011\n\t\t[4, \"0123\", \"0222\", \"0322\", \"0421\", \"0521\", \"0619\", \"0719\", \"0817\", \"0916\", \"1015\", \"1114\", \"1213\", \"1312\"], \t//2012\n\t\t[0, \"0210\", \"0312\", \"0410\", \"0510\", \"0608\", \"0708\", \"0807\", \"0905\", \"1005\", \"1103\", \"1203\", \"1301\"], \t//2013\n\t\t[9, \"0131\", \"0301\", \"0331\", \"0429\", \"0529\", \"0627\", \"0727\", \"0825\", \"0924\", \"1024\", \"1122\", \"1222\", \"1320\"], \t//2014\n\t\t[0, \"0219\", \"0320\", \"0419\", \"0518\", \"0616\", \"0716\", \"0814\", \"0913\", \"1013\", \"1112\", \"1211\", \"1310\"], \t//2015\n\t\t[0, \"0208\", \"0309\", \"0407\", \"0507\", \"0605\", \"0704\", \"0803\", \"0901\", \"1001\", \"1031\", \"1129\", \"1229\"], \t//2016\n\t\t[6, \"0128\", \"0226\", \"0328\", \"0426\", \"0526\", \"0624\", \"0723\", \"0822\", \"0920\", \"1020\", \"1118\", \"1218\", \"1317\"], \t//2017\n\t\t[0, \"0216\", \"0317\", \"0416\", \"0515\", \"0614\", \"0713\", \"0811\", \"0910\", \"1009\", \"1108\", \"1207\", \"1306\"], \t//2018\n\t\t[0, \"0205\", \"0307\", \"0405\", \"0505\", \"0603\", \"0703\", \"0801\", \"0830\", \"0929\", \"1028\", \"1126\", \"1226\"], \t//2019\n\t\t[4, \"0125\", \"0223\", \"0324\", \"0423\", \"0523\", \"0621\", \"0721\", \"0819\", \"0917\", \"1017\", \"1115\", \"1215\", \"1313\"], \t//2020\n\t\t[0, \"0212\", \"0313\", \"0412\", \"0512\", \"0610\", \"0710\", \"0808\", \"0907\", \"1006\", \"1105\", \"1204\", \"1303\"], \t//2021\n\t\t[0, \"0201\", \"0303\", \"0401\", \"0501\", \"0530\", \"0629\", \"0729\", \"0827\", \"0926\", \"1025\", \"1124\", \"1223\"], \t//2022\n\t\t[2, \"0122\", \"0220\", \"0322\", \"0420\", \"0519\", \"0618\", \"0718\", \"0816\", \"0915\", \"1015\", \"1113\", \"1213\", \"1311\"], \t//2023\n\t\t[0, \"0210\", \"0310\", \"0409\", \"0508\", \"0606\", \"0706\", \"0804\", \"0903\", \"1003\", \"1101\", \"1201\", \"1231\"], \t//2024\n\t\t[6, \"0129\", \"0228\", \"0329\", \"0428\", \"0527\", \"0625\", \"0725\", \"0823\", \"0922\", \"1021\", \"1120\", \"1220\", \"1319\"], \t//2025\n\t\t[0, \"0217\", \"0319\", \"0417\", \"0517\", \"0615\", \"0714\", \"0813\", \"0911\", \"1010\", \"1109\", \"1209\", \"1308\"], \t//2026\n\t\t[0, \"0206\", \"0308\", \"0407\", \"0506\", \"0605\", \"0704\", \"0802\", \"0901\", \"0930\", \"1029\", \"1128\", \"1228\"], \t//2027\n\t\t[5, \"0126\", \"0225\", \"0326\", \"0425\", \"0524\", \"0623\", \"0722\", \"0820\", \"0919\", \"1018\", \"1116\", \"1216\", \"1315\"], \t//2028\n\t\t[0, \"0213\", \"0315\", \"0414\", \"0513\", \"0612\", \"0711\", \"0810\", \"0908\", \"1008\", \"1106\", \"1205\", \"1304\"], \t//2029\n\t\t[0, \"0203\", \"0304\", \"0403\", \"0502\", \"0601\", \"0701\", \"0730\", \"0829\", \"0927\", \"1027\", \"1125\", \"1225\"], \t//2030\n\t\t[3, \"0123\", \"0221\", \"0323\", \"0422\", \"0521\", \"0620\", \"0719\", \"0818\", \"0917\", \"1016\", \"1115\", \"1214\", \"1313\"], \t//2031\n\t\t[0, \"0211\", \"0312\", \"0410\", \"0509\", \"0608\", \"0707\", \"0806\", \"0905\", \"1004\", \"1103\", \"1203\", \"1301\"], \t//2032\n\t\t[7, \"0131\", \"0301\", \"0331\", \"0429\", \"0528\", \"0627\", \"0726\", \"0825\", \"0923\", \"1023\", \"1122\", \"1222\", \"1320\"], \t//2033\n\t\t[0, \"0219\", \"0320\", \"0419\", \"0518\", \"0616\", \"0716\", \"0814\", \"0913\", \"1012\", \"1111\", \"1211\", \"1309\"], \t//2034\n\t\t[0, \"0208\", \"0310\", \"0408\", \"0508\", \"0606\", \"0705\", \"0804\", \"0902\", \"1001\", \"1031\", \"1130\", \"1229\"], \t//2035\n\t\t[6, \"0128\", \"0227\", \"0328\", \"0426\", \"0526\", \"0624\", \"0723\", \"0822\", \"0920\", \"1019\", \"1118\", \"1217\", \"1316\"], \t//2036\n\t\t[0, \"0215\", \"0317\", \"0416\", \"0515\", \"0614\", \"0713\", \"0811\", \"0910\", \"1009\", \"1107\", \"1207\", \"1305\"], \t//2037\n\t\t[0, \"0204\", \"0306\", \"0405\", \"0504\", \"0603\", \"0702\", \"0801\", \"0830\", \"0929\", \"1028\", \"1126\", \"1226\"], \t//2038\n\t\t[5, \"0124\", \"0223\", \"0325\", \"0423\", \"0523\", \"0622\", \"0721\", \"0820\", \"0918\", \"1018\", \"1116\", \"1216\", \"1314\"], \t//2039\n\t\t[0, \"0212\", \"0313\", \"0411\", \"0511\", \"0610\", \"0709\", \"0808\", \"0906\", \"1006\", \"1105\", \"1204\", \"1303\"], \t//2040\n\t\t[0, \"0201\", \"0302\", \"0401\", \"0430\", \"0530\", \"0628\", \"0728\", \"0827\", \"0925\", \"1025\", \"1124\", \"1223\"], \t//2041\n\t\t[2, \"0122\", \"0220\", \"0322\", \"0420\", \"0519\", \"0618\", \"0717\", \"0816\", \"0914\", \"1014\", \"1113\", \"1212\", \"1311\"], \t//2042\n\t\t[0, \"0210\", \"0311\", \"0410\", \"0509\", \"0607\", \"0707\", \"0805\", \"0903\", \"1003\", \"1102\", \"1201\", \"1231\"], \t//2043\n\t\t[7, \"0130\", \"0229\", \"0329\", \"0428\", \"0527\", \"0625\", \"0725\", \"0823\", \"0921\", \"1021\", \"1119\", \"1219\", \"1318\"], \t//2044\n\t\t[0, \"0217\", \"0319\", \"0417\", \"0517\", \"0615\", \"0714\", \"0813\", \"0911\", \"1010\", \"1109\", \"1208\", \"1307\"], \t//2045\n\t\t[0, \"0206\", \"0308\", \"0406\", \"0506\", \"0604\", \"0704\", \"0802\", \"0901\", \"0930\", \"1029\", \"1128\", \"1227\"], \t//2046\n\t\t[5, \"0126\", \"0225\", \"0326\", \"0425\", \"0525\", \"0623\", \"0723\", \"0821\", \"0920\", \"1019\", \"1117\", \"1217\", \"1315\"], \t//2047\n\t\t[0, \"0214\", \"0314\", \"0413\", \"0513\", \"0611\", \"0711\", \"0810\", \"0908\", \"1008\", \"1106\", \"1205\", \"1304\"], \t//2048\n\t\t[0, \"0202\", \"0304\", \"0402\", \"0502\", \"0531\", \"0630\", \"0730\", \"0828\", \"0927\", \"1027\", \"1125\", \"1225\"], \t//2049\n\t\t[3, \"0123\", \"0221\", \"0323\", \"0421\", \"0521\", \"0619\", \"0719\", \"0817\", \"0916\", \"1016\", \"1114\", \"1214\", \"1313\"], \t//2050\n\t\t[0, \"0211\", \"0313\", \"0411\", \"0510\", \"0609\", \"0708\", \"0806\", \"0905\", \"1005\", \"1103\", \"1203\", \"1302\"], \t//2051\n\t\t[8, \"0201\", \"0301\", \"0331\", \"0429\", \"0528\", \"0627\", \"0726\", \"0824\", \"0923\", \"1022\", \"1121\", \"1221\", \"1320\"], \t//2052\n\t\t[0, \"0219\", \"0320\", \"0419\", \"0518\", \"0616\", \"0716\", \"0814\", \"0912\", \"1012\", \"1110\", \"1210\", \"1309\"], \t//2053\n\t\t[0, \"0208\", \"0309\", \"0408\", \"0508\", \"0606\", \"0705\", \"0804\", \"0902\", \"1001\", \"1031\", \"1129\", \"1229\"], \t//2054\n\t\t[6, \"0128\", \"0226\", \"0328\", \"0427\", \"0526\", \"0625\", \"0724\", \"0823\", \"0921\", \"1020\", \"1119\", \"1218\", \"1317\"], \t//2055\n\t\t[0, \"0215\", \"0316\", \"0415\", \"0515\", \"0613\", \"0713\", \"0811\", \"0910\", \"1009\", \"1107\", \"1207\", \"1305\"], \t//2056\n\t\t[0, \"0204\", \"0305\", \"0404\", \"0504\", \"0602\", \"0702\", \"0731\", \"0830\", \"0929\", \"1028\", \"1126\", \"1226\"], \t//2057\n\t\t[4, \"0124\", \"0223\", \"0324\", \"0423\", \"0522\", \"0621\", \"0720\", \"0819\", \"0918\", \"1017\", \"1116\", \"1216\", \"1314\"], \t//2058\n\t\t[0, \"0212\", \"0314\", \"0412\", \"0512\", \"0610\", \"0710\", \"0808\", \"0907\", \"1006\", \"1105\", \"1205\", \"1304\"], \t//2059\n\t\t[0, \"0202\", \"0303\", \"0401\", \"0501\", \"0530\", \"0628\", \"0727\", \"0826\", \"0924\", \"1024\", \"1123\", \"1223\"], \t//2060\n\t\t[3, \"0121\", \"0220\", \"0322\", \"0420\", \"0519\", \"0618\", \"0717\", \"0815\", \"0914\", \"1013\", \"1112\", \"1212\", \"1311\"], \t//2061\n\t\t[0, \"0209\", \"0311\", \"0410\", \"0509\", \"0607\", \"0707\", \"0805\", \"0903\", \"1003\", \"1101\", \"1201\", \"1231\"], \t//2062\n\t\t[7, \"0129\", \"0228\", \"0330\", \"0428\", \"0528\", \"0626\", \"0726\", \"0824\", \"0922\", \"1022\", \"1120\", \"1220\", \"1318\"], \t//2063\n\t\t[0, \"0217\", \"0318\", \"0417\", \"0516\", \"0615\", \"0714\", \"0813\", \"0911\", \"1010\", \"1109\", \"1208\", \"1307\"], \t//2064\n\t\t[0, \"0205\", \"0307\", \"0406\", \"0505\", \"0604\", \"0704\", \"0802\", \"0901\", \"0930\", \"1029\", \"1128\", \"1227\"], \t//2065\n\t\t[5, \"0126\", \"0224\", \"0326\", \"0424\", \"0524\", \"0623\", \"0722\", \"0821\", \"0919\", \"1019\", \"1117\", \"1217\", \"1315\"], \t//2066\n\t\t[0, \"0214\", \"0315\", \"0414\", \"0513\", \"0612\", \"0711\", \"0810\", \"0909\", \"1008\", \"1107\", \"1206\", \"1305\"], \t//2067\n\t\t[0, \"0203\", \"0304\", \"0402\", \"0502\", \"0531\", \"0629\", \"0729\", \"0828\", \"0926\", \"1026\", \"1125\", \"1224\"], \t//2068\n\t\t[4, \"0123\", \"0221\", \"0323\", \"0421\", \"0521\", \"0619\", \"0718\", \"0817\", \"0915\", \"1015\", \"1114\", \"1214\", \"1312\"], \t//2069\n\t\t[0, \"0211\", \"0312\", \"0411\", \"0510\", \"0609\", \"0708\", \"0806\", \"0905\", \"1004\", \"1103\", \"1203\", \"1301\"], \t//2070\n\t\t[8, \"0131\", \"0302\", \"0331\", \"0430\", \"0529\", \"0628\", \"0727\", \"0825\", \"0924\", \"1023\", \"1122\", \"1221\", \"1320\"], \t//2071\n\t\t[0, \"0219\", \"0320\", \"0418\", \"0518\", \"0616\", \"0716\", \"0814\", \"0912\", \"1012\", \"1110\", \"1210\", \"1308\"], \t//2072\n\t\t[0, \"0207\", \"0309\", \"0407\", \"0507\", \"0605\", \"0704\", \"0803\", \"0901\", \"0930\", \"1030\", \"1128\", \"1228\"], \t//2073\n\t\t[6, \"0126\", \"0225\", \"0326\", \"0425\", \"0525\", \"0623\", \"0723\", \"0821\", \"0920\", \"1019\", \"1118\", \"1217\", \"1316\"], \t//2074\n\t\t[0, \"0214\", \"0316\", \"0414\", \"0514\", \"0612\", \"0712\", \"0811\", \"0909\", \"1009\", \"1107\", \"1207\", \"1305\"], \t//2075\n\t\t[0, \"0204\", \"0304\", \"0403\", \"0502\", \"0601\", \"0630\", \"0730\", \"0828\", \"0927\", \"1027\", \"1125\", \"1225\"], \t//2076\n\t\t[0, \"0123\", \"0222\", \"0323\", \"0422\", \"0521\", \"0620\", \"0719\", \"0818\", \"0917\", \"1017\", \"1115\", \"1215\"], \t//2077\n\t\t[0, \"0113\", \"0212\", \"0313\", \"0412\", \"0511\", \"0609\", \"0709\", \"0807\", \"0906\", \"1006\", \"1104\", \"1204\"], \t//2078\n\t\t[0, \"0103\", \"0201\", \"0303\", \"0401\", \"0501\", \"0530\", \"0628\", \"0728\", \"0826\", \"0925\", \"1024\", \"1123\"], \t//2079\n\t\t[3, \"1223\", \"0122\", \"0220\", \"0321\", \"0419\", \"0519\", \"0617\", \"0716\", \"0815\", \"0913\", \"1012\", \"1111\", \"1211\"], \t//2080\n\t\t[0, \"0110\", \"0208\", \"0310\", \"0409\", \"0508\", \"0607\", \"0706\", \"0804\", \"0903\", \"1002\", \"1031\", \"1130\"], \t//2081\n\t\t[7, \"1230\", \"0128\", \"0227\", \"0329\", \"0428\", \"0527\", \"0625\", \"0725\", \"0823\", \"0922\", \"1021\", \"1119\", \"1219\"], \t//2082\n\t\t[0, \"0118\", \"0216\", \"0318\", \"0417\", \"0516\", \"0615\", \"0714\", \"0813\", \"0911\", \"1011\", \"1109\", \"1209\"], \t//2083\n\t\t[0, \"0107\", \"0206\", \"0306\", \"0405\", \"0504\", \"0603\", \"0703\", \"0801\", \"0831\", \"0929\", \"1029\", \"1127\"], \t//2084\n\t\t[5, \"1227\", \"0125\", \"0224\", \"0325\", \"0423\", \"0523\", \"0622\", \"0721\", \"0820\", \"0919\", \"1018\", \"1117\", \"1216\"], \t//2085\n\t\t[0, \"0115\", \"0213\", \"0315\", \"0413\", \"0512\", \"0611\", \"0710\", \"0809\", \"0908\", \"1007\", \"1106\", \"1206\"], \t//2086\n\t\t[0, \"0104\", \"0203\", \"0304\", \"0403\", \"0502\", \"0531\", \"0630\", \"0729\", \"0828\", \"0926\", \"1026\", \"1125\"], \t//2087\n\t\t[4, \"1225\", \"0123\", \"0222\", \"0322\", \"0421\", \"0520\", \"0618\", \"0718\", \"0816\", \"0914\", \"1014\", \"1113\", \"1213\"], \t//2088\n\t\t[0, \"0111\", \"0210\", \"0312\", \"0410\", \"0510\", \"0608\", \"0707\", \"0806\", \"0904\", \"1003\", \"1102\", \"1202\"], \t//2089\n\t\t[8, \"1231\", \"0130\", \"0301\", \"0331\", \"0429\", \"0529\", \"0627\", \"0726\", \"0825\", \"0923\", \"1022\", \"1121\", \"1221\"], \t//2090\n\t\t[0, \"0119\", \"0218\", \"0320\", \"0418\", \"0518\", \"0616\", \"0716\", \"0814\", \"0913\", \"1012\", \"1110\", \"1210\"], \t//2091\n\t\t[0, \"0108\", \"0207\", \"0308\", \"0406\", \"0506\", \"0605\", \"0704\", \"0803\", \"0901\", \"1001\", \"1030\", \"1129\"], \t//2092\n\t\t[6, \"1228\", \"0126\", \"0225\", \"0327\", \"0425\", \"0525\", \"0623\", \"0723\", \"0822\", \"0920\", \"1020\", \"1118\", \"1218\"], \t//2093\n\t\t[0, \"0116\", \"0214\", \"0316\", \"0414\", \"0514\", \"0612\", \"0712\", \"0811\", \"0909\", \"1009\", \"1108\", \"1207\"], \t//2094\n\t\t[0, \"0106\", \"0204\", \"0306\", \"0404\", \"0503\", \"0602\", \"0701\", \"0731\", \"0829\", \"0928\", \"1028\", \"1127\"], \t//2095\n\t\t[4, \"1226\", \"0125\", \"0223\", \"0324\", \"0422\", \"0521\", \"0620\", \"0719\", \"0817\", \"0916\", \"1016\", \"1115\", \"1214\"], \t//2096\n\t\t[0, \"0113\", \"0212\", \"0313\", \"0412\", \"0511\", \"0609\", \"0709\", \"0807\", \"0905\", \"1005\", \"1104\", \"1203\"], \t//2097\n\t\t[0, \"0102\", \"0201\", \"0303\", \"0401\", \"0501\", \"0530\", \"0628\", \"0727\", \"0826\", \"0924\", \"1024\", \"1122\"], \t//2098\n\t\t[2, \"1222\", \"0121\", \"0220\", \"0321\", \"0420\", \"0520\", \"0618\", \"0717\", \"0816\", \"0914\", \"1013\", \"1112\", \"1211\"] \t//2099\n\t];\n\tvar MINYEAR = 1900;\n\tvar _chineseLunar = {};\n\n\t/*\n\t * 分析日期表达式，并提取其中的单位和数值\n\t */\n\tvar _expression = function(expr) {\n\t\tvar list = expr.match(/[+-]?\\d+((ms)|[yMdhmsw])/g);\n\t\tvar result = [];\n\t\tfor(var i = 0; i < list.length; i++){\n\t\t\t//提取单位和数值\n\t\t\tif (/([+-])(\\d+)(.+)/.test(list[i])) {\n\t\t\t\tvar val = parseInt(RegExp.$2);\n\t\t\t\tif(RegExp.$1 === \"-\") val = -val;\n\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue: val,\n\t\t\t\t\tunit: RegExp.$3\n\t\t\t\t});\n\t\t\t};\n\t\t\treturn result;\n\t\t};\n\t};\n\n\t//计算公历两个日期之差\n\tvar _solarDiff = function(left, right, interval) {\n\t\tvar span = left.getTime() - right.getTime(); //相差毫秒\n\t\tswitch (interval) {\n\t\t\tcase \"y\": return parseInt(left.getFullYear() - right.getFullYear());\n\t\t\tcase \"M\": return parseInt((left.getFullYear() - right.getFullYear()) * 12 + (left.getMonth() - right.getMonth()));\n\t\t\tcase \"d\": return Math.ceil(span / 1000 / 60 / 60 / 24);\n\t\t\tcase \"w\": return Math.floor(span / 1000 / 60 / 60 / 24 / 7);\n\t\t\tcase \"h\": return Math.floor(span / 1000 / 60 / 60);\n\t\t\tcase \"m\": return Math.floor(span / 1000 / 60);\n\t\t\tcase \"s\": return Math.floor(span / 1000);\n\t\t\tcase \"ms\": return parseInt(span);\n\t\t}\n\t}\n\n\t//_solarAdd(date, '5d-6m');\n\tvar _solarAdd = function(date, expr){\n\n\t};\n\n\t/*\n\t 找到农历\n\t isPerYear，是否为农历前一年的对应数据\n\t */\n\tvar _findLunar = function(solar, index, minMonth, maxMonth, isPreYear) {\n\t\t//取得映射的数据\n\t\tvar mapping = MAPPING[index];\n\t\tif (!mapping) return false;\n\n\t\tvar year = solar.getFullYear()\n\t\t\t, month = solar.getMonth() + 1\n\t\t\t, date = solar.getDate();\n\t\tvar lunarYear = year;\n\t\tvar lunarMonth, find, solarMonth;\n\n\t\t//查找农历\n\t\tfor (var i = mapping.length - 1; i > 0; i--) {\n\t\t\tlunarMonth = i;\n\t\t\t//取对应的农历月与天\n\t\t\tvar segMonth = Number(mapping[i].substring(0, 2));\n\t\t\tvar segDay = Number(mapping[i].substring(2, 4));\n\n\t\t\tsolarMonth = isPreYear && segMonth > 12 ? segMonth - 12 : segMonth;\n\t\t\tfind = solarMonth < month || (solarMonth == month && segDay <= date) ||\n\t\t\t\t((segMonth <= minMonth || segMonth >= maxMonth) && isPreYear);\n\t\t\tif ((solarMonth == 12 && solarMonth > month && i == 1)) {\n\t\t\t\tfind = true;\n\t\t\t\tyear--;\n\t\t\t};\n\t\t\tif (find) break;\n\t\t}\n\n\t\t//如果找到，则赋值\n\t\tif(!find) return false;\n\t\t//取前一年\n\t\tif (isPreYear && segMonth == 12) year = year - 1;\n\t\tlunarYear = isPreYear ? lunarYear - 1 : lunarYear;\n\t\treturn {\n\t\t\tyear: year,\n\t\t\tmonth: solarMonth,\n\t\t\tday: segDay,\n\t\t\tlunarYear: lunarYear,\n\t\t\tlunarMonth: lunarMonth,\n\t\t\tleapMonth: mapping[0]\t\t\t//闰月\n\t\t};\n\t};\n\n\t//日期累加\n\tvar _dateAdd = function(lunar, value, unit){\n\t\tif(unit == 'M'){\n\t\t\treturn _chineseLunar.monthAdd(lunar, value);\n\t\t}else{\n\t\t\t//转换为阳历，计算完再转为农历\n\t\t\tvar solar = _chineseLunar.lunarToSolar(lunar);\n\t\t\tsolar = _solarAdd(solar, value, unit);\n\t\t\treturn _chineseLunar.solarToLunar(solar);\n\t\t};\n\t};\n\n\t/*\n\t 农历相加\n\t */\n\t_chineseLunar.dateAdd = function(lunar, expr) {\n\t\t//分析表达式\n\t\tvar list = _expression(expr);\n\n\t\tfor(var i = 0; i < list.length; i ++){\n\t\t\tlunar = _dateAdd(lunar, list[i]);\n\t\t};\n\t\treturn lunar;\n\t};\n\n\t/*\n\t 计算两个农历时间的差值，主要计算月份之间的差，其它和公历是一样的\n\t */\n\t_chineseLunar.dateDiff = function(lunar1, lunar2, expr) {\n\t\t//计算农历月份差值\n\t\tif(expr == \"M\"){\n\t\t\treturn _chineseLunar.monthDiff(lunar1, lunar2);\n\t\t};\n\n\t\t//先转成公历，除了月份，其它的都可以按公历计算\n\t\tvar solar1 = _chineseLunar.lunarToSolar(lunar1);\n\t\tvar solar2 = _chineseLunar.lunarToSolar(lunar2);\n\t\t//再把农历转到公历\n\t\treturn _solarDiff(solar2, solar1, expr);\n\t};\n\n\t/*\n\t 农历月份相加\n\t */\n\t_chineseLunar.monthAdd = function(lunar, inc) {\n\t\t//如果是Date，则转换为农历\n\t\tif (lunar instanceof Date) lunar = _chineseLunar.solarToLunar(lunar);\n\t\tif (inc == 0) return lunar;\n\n\t\tvar year = lunar.year, count;\n\t\tvar month = lunar.month;\n\t\tif(lunar.leap ||\n\t\t\t(lunar.leapMonth > 0 && lunar.month > lunar.leapMonth)) month++;\n\n\t\tvar run = true;\n\t\tdo {\n\t\t\t//计算当前年有多少个月\n\t\t\tcount = _chineseLunar.monthsOfYear(year);\n\t\t\tinc = inc + month - count;\n\t\t\tif (inc <= 0) {\n\t\t\t\trun = false;\n\t\t\t\tmonth = year == lunar.year ? count + inc : count + inc - month;\n\t\t\t}else {\n\t\t\t\tyear++;\n\t\t\t\tmonth = 1;\n\t\t\t}\n\t\t} while (run);\n\n\t\t//获取最后的结果年的闰月是哪一个月\n\t\tvar leapMonth = _chineseLunar.leapMonthOfYear(year);\n\t\tvar leap = false;\n\t\t//如果闰月大于农历月，则月份减1\n\t\tif (leapMonth > 0 && month > leapMonth) {\n\t\t\tmonth--;\n\t\t\t//如果减完后月份和闰月相等，表示是闰月\n\t\t\tleap = month == leapMonth;\n\t\t}\n\n\t\treturn {\n\t\t\tyear: year,\n\t\t\tmonth: month,\n\t\t\tleap: leap,\n\t\t\tleapMonth: leapMonth\n\t\t};\n\t};\n\n\t/*\n\t * 返回两段日期的农历差了多少个月，因为有闰月，所以和公历不一样\n\t * date1和date2允许为公历\n\t */\n\t_chineseLunar.monthDiff = function(lunar1, lunar2) {\n\t\t//如果是公历的日期格式，则转换为农历\n\t\tvar count = 0;\n\n\t\t//如果数据类型是日期，则转换为农历\n\t\tif (lunar1 instanceof Date) lunar1 = _chineseLunar.solarToLunar(lunar1);\n\t\tif (lunar2 instanceof Date) lunar2 = _chineseLunar.solarToLunar(lunar2);\n\n\t\t//两个日期是同一年\n\t\tif (lunar1.year == lunar2.year) {\n\t\t\tcount = lunar2.month - lunar1.month;\n\t\t\t//中间有闰月的存在，计数器加一\n\t\t\tif (lunar1.leapMonth >= lunar1.month && lunar1.leapMonth <= lunar2.month) count++;\n\t\t} else {\n\t\t\t//计算首年，如果当前的闰月大于当前月，或者当前年有闰月且当前月等于闰月，但当前月又不是闰月，则要多添加一个月\n\t\t\tcount = 12;\n\t\t\tif(lunar1.leapMonth > lunar1.month ||\n\t\t\t\t(lunar1.leapMonth == lunar1.month && !lunar1.isLeaMonth)) count += 1;\n\t\t\tcount  -= lunar1.month;\n\n\t\t\t//计算两年之间中间的年月份\n\t\t\tvar year = lunar1.year + 1;\n\t\t\tfor (var i = year; i < lunar2.year; i++) {\n\t\t\t\tcount += _chineseLunar.monthsOfYear(year++);\n\t\t\t}\n\t\t\t//计算最后一年\n\t\t\tcount += lunar2.month;\n\t\t\tif (lunar2.isLeapMonth || lunar2.month < lunar2.leapMonth) count++;\n\t\t};\n\t\treturn count;\n\t};\n\n\t/*\n\t * 计算某年某月一个有多少天\n\t * daysOfMonth({}) 或者 daysOfMonth(year, month, leap);\n\t */\n\t_chineseLunar.daysOfMonth = function(year, month, leap) {\n\t\tif (typeof (year) == \"object\") {\n\t\t\tmonth = year.month;\n\t\t\tleap = year.leap;\n\t\t\tyear = year.year;\n\t\t};\n\n\t\tvar date1 = _chineseLunar.lunarToSolar(year, month, 1, leap);\n\t\tvar leapMonth = _chineseLunar.leapMonthOfYear(year);\n\t\tif (leapMonth == month && !leap) {\n\t\t\t//如果是闰月和当前一月一至，且当前月不是闰月，说明下一个月是闰月，例如2009年5月，这一年闰5月，如果传过来的不是闰月，那么下一个月就是闰月\n\t\t\tleap = true;\n\t\t} else if (month == 12) {\n\t\t\t//农历的最后一个月\n\t\t\tyear++;\n\t\t\tmonth = 1;\n\t\t} else {\n\t\t\tleap = false;\n\t\t\tmonth++;\n\t\t};\n\n\t\tvar date2 = _chineseLunar.lunarToSolar(year, month, 1, leap);\n\t\treturn _dateDiff(date2, date1, \"d\");\n\n\t};\n\n\t//获取农历某一年有多少个月\n\t_chineseLunar.monthsOfYear = function(year) {\n\t\treturn MAPPING[year - MINYEAR].length - 1;\n\t};\n\n\t//获取农历某年的闰月是几月，\n\t_chineseLunar.leapMonthOfYear = function(year) {\n\t\tvar info = MAPPING[year - MINYEAR];\n\t\treturn info ? info[0] : 0;\n\t};\n\n\t/*\n\t 农历转阳历\n\t lunarToSolar({})，或者lunarToSolar(year, month, day, leap)\n\t */\n\t_chineseLunar.lunarToSolar = function(year, month, day, leap) {\n\t\tvar arg0 = arguments[0];\n\n\t\t//第一个参数是对象\n\t\tif (typeof (arg0) == \"object\" && arguments.length == 1) {\n\t\t\tyear = arg0.year;\n\t\t\tmonth = arg0.month;\n\t\t\tday = arg0.day;\n\t\t\tleap = arg0.leap;\n\t\t};\n\n\t\t//根据偏移量取得映射数据\n\t\tvar offset = year - MINYEAR;\n\t\t//所查询的日期超出范围\n\t\tif (offset < 0 || offset > MAPPING.length){\n\t\t\tthrow new Error('Specified date range is invalid.');\n\t\t};\n\n\t\t//取得润月是哪一个月\n\t\tvar leapMonth = MAPPING[offset][0];\n\t\t//如果isLeap=true，并且当前月份就是闰月，或者本月有闰月，且当前月份大于闰月，则月份需要加1\n\t\tif ((leap && month == leapMonth) ||\n\t\t\t(leapMonth > 0 && month > leapMonth)){\n\t\t\tmonth += 1;\n\t\t};\n\n\t\t//取出对应到某个月的片断\n\t\tvar segment = MAPPING[offset][month]; \t\t//农历第一天对应公历的具体天\n\t\tvar mapMonth = Number(segment.substring(0, 2))\n\t\tvar mapDate = Number(segment.substring(2, 4));\n\n\t\tif (mapMonth > 12) {\n\t\t\tyear += 1;\n\t\t\tmapMonth -= 12;\n\t\t};\n\n\t\tvar solar = new Date(year, mapMonth - 1, mapDate);\n\t\tvar time = solar.getTime() + ((day - 1) * 24 * 60 * 60 * 1000);\n\t\treturn new Date(time);\n\t};\n\n\t/*\n\t 公历转农历\n\t 1.查找对应农历初一是哪一天\n\t 2.将农历初一转换为公历\n\t 3.计入偏移量\n\t */\n\t_chineseLunar.solarToLunar = function(solar, format) {\n\t\tvar offset = solar.getFullYear() - MINYEAR;\n\t\t//超出范围\n\t\tif(offset <= 0 || offset >= MAPPING.length){\n\t\t\tthrow new Error('Specified date range is invalid.');\n\t\t};\n\n\t\t//查找范围内的农历数据\n\t\tvar data = _findLunar(solar, offset, 0, 13, false);\n\t\t//如果没有找到，则找前一年的，因为农历在公历之前，并且不会超过一年，查一年就可以了\n\t\tdata = data || _findLunar(solar, offset - 1, 12, 99, true);\n\n\t\t//还是没有找到，表示超出范围\n\t\tif (!data) return false;\n\n\t\t//农历初一对应公历的哪一天\n\t\tvar firstDay = new Date(data.year, data.month - 1, data.day);\n\t\tvar day = _solarDiff(solar, firstDay, \"d\") + 1;\n\n\t\t//返回的农历结果\n\t\tvar result = {\n\t\t\tleap: data.leapMonth > 0 && data.leapMonth + 1 == data.lunarMonth,\n\t\t\tyear: data.lunarYear,\n\t\t\tmonth: data.leapMonth > 0 && data.lunarMonth > data.leapMonth ? data.lunarMonth - 1 : data.lunarMonth,\n\t\t\tday: day,\n\t\t\tleapMonth: data.leapMonth\n\t\t};\n\n\t\t//判断是否要格式化结果\n\t\treturn (format && result) ? _chineseLunar.format(result, format) : result;\n\t};\n\n\t//获取中国传统干支的名称\n\t_chineseLunar.traditionalYearName = function(year) {\n\t\tvar Gan = \"甲乙丙丁戊己庚辛壬癸\".split(\"\");\n\t\tvar Zhi = \"子丑寅卯辰巳午未申酉戌亥\".split(\"\");\n\t\tyear = year - MINYEAR + 36;\n\t\treturn (Gan[year % 10] + Zhi[year % 12] + \"年\");\n\t};\n\n\t//获取中文的年\n\t_chineseLunar.yearName = function(year) {\n\t\tvar cnStr = '〇,一,二,三,四,五,六,七,八,九'.split(\",\");\n\t\tvar cYear = year.toString();\n\t\tvar result = '';\n\t\tfor (var i = 0; i < cYear.length; i++) {\n\t\t\tresult += cnStr[parseInt(cYear.charAt(i))];\n\t\t}\n\t\treturn result + '年';\n\t};\n\n\t//获取中国的生肖\n\t_chineseLunar.animalName = function(year) {\n\t\treturn \"鼠牛虎兔龙蛇马羊猴鸡狗猪\".split(\"\")[(year - 4) % 12];\n\t};\n\n\t//获取农历月的名称\n\t_chineseLunar.monthName = function(month, traditional, leap) {\n\t\tvar monthName = \"正,二,三,四,五,六,七,八,九,十,十一,十二\".split(\",\");\n\t\tif (traditional) { monthName[11] = \"腊\" }\n\t\treturn (leap ? \"闰\" : \"\") + monthName[month - 1] + \"月\";\n\t};\n\n\t//获取农历传统天的名称\n\t_chineseLunar.dayName = function(lunar) {\n\t\tswitch (lunar) {\n\t\t\tcase 10: return '初十';\n\t\t\tcase 20: return '二十';\n\t\t\tcase 30: return '三十';\n\t\t\tdefault: return (\"初十廿卅\".split(\"\")[Math.floor(lunar / 10)] +\n\t\t\t\t\"一二三四五六七八九十\".split(\"\")[(lunar - 1) % 10]) || lunar;\n\t\t}\n\t};\n\n\t//格式化农历日期，date是农历的日期\n\t_chineseLunar.format = function(lunar, expr) {\n\t\treturn expr.replace(/[TAYyMmdD]/g, function(m, i) {\n\t\t\tswitch (m) {\n\t\t\t\t//获取传统的年\n\t\t\t\tcase \"T\": return _chineseLunar.traditionalYearName(lunar.year);\n\t\t\t\t//获取生肖\n\t\t\t\tcase \"A\": return _chineseLunar.animalName(lunar.year);\n\t\t\t\t//获取中文的年\n\t\t\t\tcase \"Y\": return _chineseLunar.yearName(lunar.year);\n\t\t\t\t//获取数字年\n\t\t\t\tcase \"y\": return lunar.year;\n\t\t\t\t//获取月份\n\t\t\t\tcase \"m\": return _chineseLunar.monthName(lunar.month, false, lunar.leap);\n\t\t\t\t//获取传统的月\n\t\t\t\tcase \"M\": return _chineseLunar.monthName(lunar.month, true, lunar.leap);\n\t\t\t\t//获取天\n\t\t\t\tcase \"d\": return _chineseLunar.dayName(lunar.day);\n\t\t\t\t//如果是初一，则显示月，而不是显示\n\t\t\t\tcase \"D\":\n\t\t\t\t\tif(lunar.day == 1){\n\t\t\t\t\t\treturn _chineseLunar.monthName(lunar.month, false, lunar.leap);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn _chineseLunar.dayName(lunar.day);\n\t\t\t\t\t};\n\t\t\t}\n\t\t});\n\t};\n\n\n\tif (typeof define === 'function'){\n\t\tdefine (function (){\n\t\t\treturn _chineseLunar;\n\t\t});\n\t}else if(typeof exports === 'object'){\n\t\tmodule.exports = _chineseLunar;\n\t}else{\n\t\twindow.chineseLunar = _chineseLunar;\n\t};\n})();"}